dotnet -h
dotnet new solution
dir
dotnet new webapi -o API
dotnet solution add API
Open folder in vscode.
install dependencies c# extensions, c# dev kit, material icon theme.
shift+ctrl+p => select yes.
cd API
dotnet run ---run the project.
dotnet dev-certs https --trust  --Successfully created and trusted a new HTTPS certificate.
API > Entities
Entities > create class -AppUser.
Prop => inside class.
-------------------------------------------concepts
API > Data
Data > create class DataContext.
API > console : dotnet add package Microsoft.EntityFrameworkCore.Sqlite

create DataContext Class.
Open program.cs file => start connection between database and class.
appsettings.Developement => add DB connection string.
settings > private => Add "_" underscore -- automatic updation of private property name to _private.
settings > search => this => uncheck

nuget > dotnet.ef > get version based on dotnet version.
Copy command > run in your project use exact verson should match with dotnet version.
Tool 'dotnet-ef' (version '9.0.0') was successfully installed.

we want to create migrations.
API > Run command > dotnet ef migrations add InitialCreate -o Data/Migrations
API > Data > Migrations > cs files showing

API > dotnet ef database update --it shows updation logs in console.
Extensions > sqllite > install
Ctrl + P > add database > databaseApp.db file will shows up in file-tree.

Sqllite explorer > Users > right click >  new Query (Insert)
Write Sql command > Sql-lite file.
Select > Right click > Run selected Query > close file.
Sqllite explorer > Users > right click > show table

API > Controllers > create class UserControllers
--------------------------------------------------------------
Create endpoints for our database changes via http protocol.
We use IEnumerable -- only want to iterate. List provides more features that we doesn't need.

Add/Register controllers via builder.Services.AddControllers(); before AddDbContext methods.
Also add app.MapControllers(). Before running app.run();

----------------------------------------------------------------------------------------
get git. Close project reopen it. Close cmd.
Projects => git init
dotnet new gitignore  --ignore bin/files.
update gitignore file with appsetting.json ---beacuse it contains some confidential infos.

git init in project.
Commit all changes to staged stage to commit.
Push to selection and provide credentials to push cahnges to remote repo.
----------------------------------------------------------------------------------------

Create client - angular project
Run "ng new client" command in Project folder.
Add angular language service extension.
Disable strict mode via settings.

-------------------------------------------------------------------------------------------
we write some http client code in appcomponent.
Tested the get api. Got cors policy error.
Added code in API/program.cs file for addcors and usecors via builder.services.

----------------------------------------------------------------------------------------------

we took ngx-bootstrap to avoid angular dom manipulation and javascript jsquery (DOM) conflict.
Hence we avoided using bootstrap.
ng add ngx-bootstrap 
npm i font-awesome

----------------------------------------------------------------------------------------------
Navigate to students assests > generateTrustedSSL. Follow steps mentioned in that text file.
Copy Server/server key file and paste into ssl folder created at client level.
update options in serve script of angular.json file. Add ssl cerificate file paths.
Restart the servers.
Now our site is trusted and can be accessible on https:localhost:4200.

-------------------------------------------------------------------------------------------
Password storing options
plain text   -- worst way
Hashing      -- 
Hashing + salting the password

Add entities passwordhash/passwordsalt.
Close the process.
API > cmd > Run command "dotnet ef migrations add UserPasswordAdded"
API > CMD > dotnet ef database update
Ctrl + p > ">sql open database". On left you will see sqllite explorer.
Open that see user has two new coloumns/fields.

-------------------------------------------------------------------------------------------
Dry principle
Created base-controller.
-------------------------------------------------------------------------------------------
SetUp the Postman with file from studentResources. To create a postman collection. make sure we are using same http protocol on which our app is listening.

Create a accountsController.
whenever we add controller we need to restart the application.

Data Transfer Objects --Unwanted propertie removel/ flattning complex objects.
create DataTransfer objects under DTOs folder under API.
Update controller AccountController with DTOs.

How to debug c# project in vsocode.
Click in Debug option on left. Create a launch.json file.
Add configuration: Attach to .NET Process. Launch c# project.
Select .NET core attach from variables dropdown in debug section.

-----------------------------------------------------------------------------------------------------------
JWT structure: Basically a string combined of..

Dvided in three parts.
1. header 2. Payload 3. Signature.

No cookies required.
Portable
Performance -- o databse request to check if user is valid or not.

We will create service for a token that we can inject into another class as dbcontext.
Created a Interfaces folder. added implementation.
Created Services => TokenService c# class file with ITokenService implemented with exact class defined in ITokenService.

Write CreateToken method in tokenservice c# class with Iconfiguration injected.

For key we need as package called system.identitymodel.tokens.jwt. get the latetst version of it.
   <PackageReference Include="System.IdentityModel.Tokens.Jwt" Version="8.12.1" /> we will have in API.csproj file.
-----------------------------------------------------------------------------------------------------------













 


 





  



 

